#pragma once

#include "MessageType.h"

std::string g_messageTypeTable[]{
    "MsgMoneyChanged",
    "MsgPopulationChanged",
    "MsgTaxChanged",
    "MsgEconomyChanged",
    "MsgCultureChanged",
    "MsgMilitaryChanged",
    "MsgCityLevelChanged",
    "MsgPhilosophyAdded",
    "MsgScorePointsChanged",
    "MsgArmyChanged",
    "MsgGloryChanged",
    "MsgDiscoveryAdded",
    "MsgDiscoveryRemoved",
    "MsgExpeditionCompleted",
    "MsgDiceUnlocked",
    "MsgPolicyDropped",
    "MsgDiscoveryDropped",
    "MsgPolicyTakenInHands",
    "MsgDraftComplete",
    "MsgPolicyTakenFromDeck",
    "MsgPlayerCountSelected",
    "MsgCitySelected",
    "MsgPlayerColorSelected",
    "MsgPoliciesShuffled",
    "MsgPolicyTakenInHandsToDeck",
    "MsgEventsShuffled",
    "MsgEventAddedToDeck",
    "MsgEventTakenFromDeck",
    "MsgPolicyActivated",
    "MsgPolicyRemovedFromHands",
    "MsgPolicyAddedToDraft",
    "MsgPolicyRemovedFromDraft",
    "MsgBeginCitySelection",
    "MsgEndCitySelection",
    "MsgBeginSelectPlayersCount",
    "MsgBeginSelectCityColor",
    "MsgBeginDraft",
    "MsgAddMoney",
    "MsgRemoveMoney",
    "MsgExpeditionAdded",
    "MsgBeginDeclareEventPhase",
    "MsgBeginCollectTaxesPhase",
    "MsgBeginThrowDicesPhase",
    "MsgBeginActionPhase",
    "MsgBeginProgress",
    "MsgBeginActivateEventPhase",
    "MsgBeginAhievmentsPhase",
    "MsgEndDeclareEventPhase",
    "MsgEndCollectTaxesPhase",
    "MsgEndThrowDicesPhase",
    "MsgEndActionPhase",
    "MsgEndProgressPhase",
    "MsgEndActivateEventPhase",
    "MsgEndAhievmentsPhase",
    "MsgEventAddedToOpenDeck",
    "MsgThrowDice",
    "MsgDiceValueChanged",
    "MsgActionUnselected",
    "MsgActionSelected",
    "MsgPhilosophyRemoved",
    "MsgOpenSelectedActions",
    "MsgExecuteAction",
    "MsgSelectLawPolicy",
    "MsgSelectExpedition",
	"MsgBeginExtraProgress",
	"MsgSelectPolicy",
    "MsgPolicyAddedToPlayed",
	"MsgSelectDiscoveryFromPool",
	"MsgSelectionActions",
	"MsgSelectPolicyFromActiveDeck",
	"MsgSelectBonus",
	"MsgSelectDiscoveryFromHands"
};

const std::string& ToString(MessageType type) {
    static_assert((sizeof(g_messageTypeTable) / sizeof(g_messageTypeTable[0])) == (int)MessageType::Count, "Not enough message strings");
    auto& v = g_messageTypeTable[(int)type];
    return v;
}
