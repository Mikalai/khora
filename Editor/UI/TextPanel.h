#pragma once

/**
@file
Subclass of TextPanelBase, which is generated by wxFormBuilder.
*/

#include <memory>

#include <Catalog/Interface/IEntry.h>
#include <Catalog/Interface/ITextEntry.h>
#include <Fonts/Interface.h>
#include <Fundamental/Interface/IMessageOutput.h>
#include <Fundamental/Interface/IAggregatedProcessor.h>
#include <Fundamental/Interface/IObserver.h>
#include <Fundamental/Module/Referenced.h>

#include "vsgEditor.h"

//// end generated include
CREATE_STATE_WRAPPER(Vandrouka::UI::Private, TextPanel, 0x7a, 0x6a, 0x90, 0xf6,
                     0x2b, 0x88, 0x4e, 0x4e, 0x8b, 0x53, 0xe5, 0xdb, 0x67, 0x67,
                     0x1, 0x82);

namespace Vandrouka::UI::Private {

/** Implementing TextPanelBase */
class TextPanel : public TextPanelBase,
                  public IObserver,
                  public IMessageOutput {
protected:
  // Handlers for TextPanelBase events.
  void fontCmbOnCombobox(wxCommandEvent &event) override;
  void valueTxtOnText(wxCommandEvent &event) override;

public:
  /** Constructor */
  TextPanel(wxWindow *parent);
  //// end generated class members

  void SetDataModel(Vandrouka::Ref<Catalog::IEntry> entry);
  Vandrouka::Ref<Catalog::ITextEntry> GetDataModel() { return _dataModel; }
  void SetFonts(std::vector<Fonts::FontInfo> fonts);

  void fontColorPickerOnColourChanged(wxColourPickerEvent &event) override;
  void offsetXEditOnText(wxCommandEvent &event) override;
  void offsetYEditOnText(wxCommandEvent &event) override;
  void offsetZEditOnText(wxCommandEvent &event) override;
  void horAxisXEditOnText(wxCommandEvent &event) override;
  void horAxisYEditOnText(wxCommandEvent &event) override;
  void horAxisZEditOnText(wxCommandEvent &event) override;
  void vertAxisXEditOnText(wxCommandEvent &event) override;
  void vertAxisYEditOnText(wxCommandEvent &event) override;
  void vertAxisZEditOnText(wxCommandEvent &event) override;
  void horAlignmentOnCombobox(wxCommandEvent &event) override;
  void vertAlignmentOnCombobox(wxCommandEvent &event) override;
  void lineSpacingEditOnText(wxCommandEvent &event) override;

  void AddRef() override;
  void Release() override;
  bool QueryInterface(const InterfaceId &id, void **o) override;
  void OnNext(Vandrouka::Ref<Vandrouka::IMessage> msg) override;
  void OnError(Vandrouka::Ref<Vandrouka::IError> error) override;
  void OnComplete() override;
  void SubmitMessage(Vandrouka::Ref<Vandrouka::IMessage> msg) override;
  void SubmitError(Vandrouka::Ref<Vandrouka::IError> msg) override;

private:
  void UpdateControls();

private:
  Vandrouka::Ref<Catalog::ITextEntry> _dataModel;
  Vandrouka::Ref<IReferenced> _dataModelSubscription;
  Vandrouka::Ref<IObserver> _observerWrapper;
  Vandrouka::Ref<IMessageOutput> _sinkWrapper;
  Vandrouka::Ref<ITextPanelStateWrapper> _stateWrapper;
  Vandrouka::Ref<Fundamental::IAggregatedProcessor> _processor;
};

} // namespace Vandrouka::UI::Private

////// end generated include
// class Entry;
// class TextEntry;
//
///** Implementing TextPanelBase */
// class TextPanel : public TextPanelBase,
//                   public IEntryObserver,
//                   public std::enable_shared_from_this<TextPanel> {
// protected:
//   // Handlers for TextPanelBase events.
//   void fontCmbOnCombobox(wxCommandEvent &event) override;
//   void valueTxtOnText(wxCommandEvent &event) override;
//
// public:
//   /** Constructor */
//   TextPanel(wxWindow *parent);
//   //// end generated class members
//
//   void SetDataModel(std::shared_ptr<Entry> entry);
//   std::shared_ptr<TextEntry> GetDataModel() { return _dataModel; }
//   void SetFonts(std::vector<FontInfo> fonts);
//
//   // Inherited via IEntryObserver
//   void OnEntryAdded(EntryPath path, std::shared_ptr<Entry> entry) override;
//   void OnEntryRemoved(EntryPath path, std::shared_ptr<Entry> entry) override;
//   void OnPropertyChanged(std::shared_ptr<Entry> sender,
//                          std::string_view name) override;
//   void OnError(const LogNotification &) const override {}
//
//   void fontColorPickerOnColourChanged(wxColourPickerEvent &event) override;
//   void offsetXEditOnText(wxCommandEvent &event) override;
//   void offsetYEditOnText(wxCommandEvent &event) override;
//   void offsetZEditOnText(wxCommandEvent &event) override;
//   void horAxisXEditOnText(wxCommandEvent &event) override;
//   void horAxisYEditOnText(wxCommandEvent &event) override;
//   void horAxisZEditOnText(wxCommandEvent &event) override;
//   void vertAxisXEditOnText(wxCommandEvent &event) override;
//   void vertAxisYEditOnText(wxCommandEvent &event) override;
//   void vertAxisZEditOnText(wxCommandEvent &event) override;
//   void horAlignmentOnCombobox(wxCommandEvent &event) override;
//   void vertAlignmentOnCombobox(wxCommandEvent &event) override;
//   void lineSpacingEditOnText(wxCommandEvent &event) override;
//
// private:
//   void UpdateControls();
//
// private:
//   std::shared_ptr<TextEntry> _dataModel;
// };
