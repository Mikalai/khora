#pragma once

/**
@file
Subclass of EditorMainWindowBase, which is generated by wxFormBuilder.
*/

#include <filesystem>
#include <set>

#include "../DataModel/DataModel.h"
#include "../IConfigEntry.h"
#include "../IDataModel.h"
#include "../IReferenced.h"
#include "../ISystemFonts.h"
#include "../MessageProcessor.h"
#include "../SystemFonts.h"
#include "../LongOperationNotification.h"
#include "TextPanel.h"
#include "TransformPanel.h"
#include "ViewerWindow.h"
#include "vsgEditor.h"
#include "ViewerState.h"

namespace Vandrouka {

class EditorMainWindow;

/** Implementing EditorMainWindowBase */
class EditorMainWindow : public ::EditorMainWindowBase,
                         public IObserver,
                         public IMessageOutput {
public:
  EditorMainWindow(Vandrouka::Ref<Vandrouka::IDataModel> dataModel,
                   Vandrouka::Ref<Vandrouka::ISystemFonts> systemFonts,
                   wxWindow *parent);
  void Paint();
  void Init(int argc, char **argv);
  void OnIdle();

  void AddRef() override;
  void Release() override;
  bool QueryInterface(const InterfaceId &id, void **o) override;

  void OnNext(Vandrouka::Ref<IMessage> msg) override;
  void OnError(Vandrouka::Ref<IError> error) override;
  void OnComplete() override;

  void SubmitMessage(Vandrouka::Ref<IMessage> msg) override;
  void SubmitError(Vandrouka::Ref<IError> msg) override;

  void OnImport(wxCommandEvent &event) override;
  void assetsTreeOnTreeSelChanged(wxTreeEvent &event) override;

  /*void assetsTreeOnTreeBeginDrag(wxTreeEvent& event) override;
  void assetsTreeOnTreeEndDrag(wxTreeEvent& event) override;
  void finalSceneOnTreeBeginDrag(wxTreeEvent& event) override;
  void finalSceneOnTreeEndDrag(wxTreeEvent& event) override;*/

  void assetsTreeOnTreeBeginDrag(wxTreeEvent &event) override;
  void assetsTreeOnTreeEndDrag(wxTreeEvent &event) override;
  void finalSceneOnTreeSelChanged(wxTreeEvent &event) override;
  void finalSceneOnTreeBeginDrag(wxTreeEvent &event) override;
  void finalSceneOnTreeEndDrag(wxTreeEvent &event) override;
  void finalSceneOnTreeItemRightClick(wxTreeEvent &event) override;
  void deleteFromSceneOnButtonClick(wxCommandEvent &event) override;
  void loadProjectMenuItemOnMenuSelection(wxCommandEvent &event) override;
  void saveProjectMenuItemOnMenuSelection(wxCommandEvent &event) override;
  void resetMenuItemOnMenuSelection(wxCommandEvent &event) override;
  void finalSceneOnTreeBeginLabelEdit(wxTreeEvent &event) override;
  void finalSceneOnTreeEndLabelEdit(wxTreeEvent &event) override;
  void finalSceneOnKeyDown(wxKeyEvent &event) override;
  void showTransformMenuOnMenuSelection(wxCommandEvent &event) override;
  void addToSceneOnCombobox(wxCommandEvent &event) override;
  void navigateOnToolClicked(wxCommandEvent &event) override;
  void exportMenuOnMenuSelection(wxCommandEvent &event) override;
  void langAddOnButtonClick(wxCommandEvent &event) override;
  void langRemoveOnButtonClick(wxCommandEvent &event) override;
  void languageListBoxOnListBoxDClick(wxListEvent &event) override;
  void importFontMenuOnMenuSelection(wxCommandEvent &event) override;
  void fontSearchOnSearchButton(wxCommandEvent &event) override;
  void fontSearchOnText(wxCommandEvent &event) override;
  void dataPanelsOnNotebookPageChanged(wxNotebookEvent &event) override;
  void fontsListOnListItemSelected(wxListEvent &event) override;
  void Reset(Vandrouka::Ref<IEntry> root);
  void SelectEntry(Vandrouka::Ref<IEntry> entry);
  void AddLanguage(std::string value);
  void RemoveLanguage(std::string value);
  void SetLanguageActive(std::string oldValue, std::string newValue);
  void SaveCurrentSelectionPath();
  void PasteEntryCopy();
  void RemoveEntry(EntryPath path);
  void AddEntry(EntryPath path, EntryType type);
  void BeginOperation(const LongOperation &op);
  void EndOperation(const LongOperation &op);

  Vandrouka::Ref<IObserver> _observerWrapper;
  Vandrouka::Ref<IAggregatedProcessor> _processor;
  Vandrouka::Ref<IEditorMainWindowStateWrapper> _stateWrapper;
  Vandrouka::Ref<IMessageOutput> _sinkWrapper;
  Vandrouka::Ref<IDataModel> _dataModel;
  Vandrouka::Ref<ISystemFonts> _systemFonts;
  Vandrouka::Ref<IReferenced> _dataModelSubscription;
  Vandrouka::Ref<IReferenced> _systemFontsSubscription;

  void UpdateFonts();
  int GetEntryTypeImage(EntryType type);
  void UpdateConfig();
  std::set<LongOperation> _longOperations;
  std::vector<std::pair<std::int32_t, vsg::ref_ptr<vsg::Node>>> _cleanup;
  std::string _fontFilter;
  std::vector<Vandrouka::FontInfo> _fontsCache;

  int _bulkOperation{0};
  std::vector<std::string> _bulkErrors;

  bool reseting{false};
  ViewerWindow *viewerWindow;
  std::filesystem::path _projectStorage;
  vsg::ref_ptr<vsg::Group> _root = vsg::Group::create();
  vsg::ref_ptr<vsg::Camera> _camera;
  vsg::ref_ptr<vsg::LookAt> _lookAt;
  vsg::ref_ptr<vsg::Trackball> _trackball;
  std::shared_ptr<TransformPanel> _transformPanel{nullptr};
  std::shared_ptr<TextPanel> _textPanel{};

  Vandrouka::Ref<IConfigEntry> _config;
  wxImageList *_imageList;
  int _imageErrorIcon;
  int _imageTransformImage;
  int _imageGroupImage;
  int _imageGeometryImage;
  int _imageMaterialImage;
  int _imageLocalizedImage;
  int _imageTextImage;
  int _imagePlusImage;

  EntryPath _copyNode;
  vsg::ref_ptr<vsg::Options> _options;

  struct Package {
    wxTreeItemId Root;
    wxTreeItemId Transforms;
    wxTreeItemId Geometries;
    wxTreeItemId Materials;
    vsg::ref_ptr<vsg::Node> RootNode;
  };

  std::unordered_map<std::string, Package> packageToId;

  EntryPath _oldPath;
  // std::unordered_map<std::string, Vandrouka::Ref<IReferenced>> _subscriptions;
};

} // namespace Vandrouka
