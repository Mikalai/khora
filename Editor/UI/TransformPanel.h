#ifndef __TransformPanel__
#define __TransformPanel__

/**
@file
Subclass of TransformPanel, which is generated by wxFormBuilder.
*/

#include <array>

#include <Catalog/Interface/IEntry.h>
#include <Catalog/Interface/ITransformEntry.h>
#include <Fundamental/Interface/IObserver.h>
#include <Fundamental/Interface/IMessage.h>
#include <Fundamental/Interface/IAggregatedProcessor.h>
#include <Fundamental/Module/Referenced.h>
#include "vsgEditor.h"

CREATE_STATE_WRAPPER(Vandrouka::UI::Private, TransformPanel, 0xdd, 0x8, 0x5b,
                     0xf6, 0x5d, 0x78, 0x46,
                     0x2c, 0x84, 0xdb, 0x93, 0x8b, 0xe4, 0x8, 0x28, 0xa1);


namespace Vandrouka::UI::Private {

//// end generated include
class TransformEntry;


/** Implementing TransformPanel */
class TransformPanel : public TransformPanelBase,
                       public IObserver,
                       public IMessageOutput {
public:
  /** Constructor */
  TransformPanel(wxWindow *parent);
  //// end generated class members

  void SetDataModel(Vandrouka::Ref<Catalog::IEntry> entry);

  Vandrouka::Ref<Catalog::ITransformEntry> GetDataModel() { return _dataModel; }
  void AddRef() override;
  void Release() override;
  bool QueryInterface(const InterfaceId &id, void **o) override;
  void OnNext(Vandrouka::Ref<IMessage> msg) override;
  void OnError(Vandrouka::Ref<IError> error) override;
  void OnComplete() override;
  void SubmitMessage(Vandrouka::Ref<IMessage> msg) override;
  void SubmitError(Vandrouka::Ref<IError> msg) override;

private:
  std::array<std::array<wxTextCtrl *, 4>, 4> _matrix;
  std::array<wxString, 3> _copyPosition;
  std::array<wxTextCtrl *, 3> _position;

  std::array<wxTextCtrl *, 4> _orientation;

  std::array<wxString, 3> _copyScale;
  std::array<wxTextCtrl *, 3> _scale;

  Vandrouka::Ref<Catalog::ITransformEntry> _dataModel;
  Vandrouka::Ref<IReferenced> _dataModelSubscription;
  Vandrouka::Ref<IObserver> _observerWrapper;
  Vandrouka::Ref<IMessageOutput> _sinkWrapper;
  Vandrouka::Ref<ITransformPanelStateWrapper> _stateWrapper;
  Vandrouka::Ref<Fundamental::IAggregatedProcessor> _processor;

  void matrixValueChanged(wxCommandEvent &event) override;
  void overrideChanged(wxCommandEvent &event) override;
  void positionChanged(wxCommandEvent &event) override;
  void scaleChanged(wxCommandEvent &event) override;
  void orientationChanged(wxCommandEvent &event) override;

  void copyPosXOnButtonClick(wxCommandEvent &event) override;
  void pastePosXOnButtonClick(wxCommandEvent &event) override;
  void copyPosYOnButtonClick(wxCommandEvent &event) override;
  void pastePosYOnButtonClick(wxCommandEvent &event) override;
  void copyPosZOnButtonClick(wxCommandEvent &event) override;
  void pastePosZOnButtonClick(wxCommandEvent &event) override;
  void pastePosOnButtonClick(wxCommandEvent &event) override;
  void copyPosOnButtonClick(wxCommandEvent &event) override;

  void copyScaleXOnButtonClick(wxCommandEvent &event) override;
  void pasteScaleXOnButtonClick(wxCommandEvent &event) override;
  void copyScaleYOnButtonClick(wxCommandEvent &event) override;
  void pasteScaleYOnButtonClick(wxCommandEvent &event) override;
  void copyScaleZOnButtonClick(wxCommandEvent &event) override;
  void pasteScaleZOnButtonClick(wxCommandEvent &event) override;
  void copyScaleOnButtonClick(wxCommandEvent &event) override;
  void pasteScaleOnButtonClick(wxCommandEvent &event) override;

private:
  void UpdateControls();  
};

} // namespace Vandrouka
//// end generated include
//class TransformEntry;
//
///** Implementing TransformPanel */
//class TransformPanel : public TransformPanelBase,
//                       public IEntryObserver,
//                       public std::enable_shared_from_this<TransformPanel> {
//public:
//  /** Constructor */
//  TransformPanel(wxWindow *parent);
//  //// end generated class members
//
//  void SetDataModel(std::shared_ptr<Entry> entry);
//  std::shared_ptr<TransformEntry> GetDataModel() { return _dataModel; }
//
//private:
//  std::array<std::array<wxTextCtrl *, 4>, 4> _matrix;
//  std::array<wxString, 3> _copyPosition;
//  std::array<wxTextCtrl *, 3> _position;
//
//  std::array<wxTextCtrl *, 4> _orientation;
//
//  std::array<wxString, 3> _copyScale;
//  std::array<wxTextCtrl *, 3> _scale;
//
//  std::shared_ptr<TransformEntry> _dataModel;
//
//  // Inherited via IEntryObserver
//  void OnEntryAdded(EntryPath path, std::shared_ptr<Entry> entry) override;
//  void OnEntryRemoved(EntryPath path, std::shared_ptr<Entry> entry) override;
//  void OnPropertyChanged(std::shared_ptr<Entry> sender,
//                         std::string_view name) override;
//  void OnError(const LogNotification &) const override {}
//
//  void matrixValueChanged(wxCommandEvent &event) override;
//  void overrideChanged(wxCommandEvent &event) override;
//  void positionChanged(wxCommandEvent &event) override;
//  void scaleChanged(wxCommandEvent &event) override;
//  void orientationChanged(wxCommandEvent &event) override;
//
//  void copyPosXOnButtonClick(wxCommandEvent &event) override;
//  void pastePosXOnButtonClick(wxCommandEvent &event) override;
//  void copyPosYOnButtonClick(wxCommandEvent &event) override;
//  void pastePosYOnButtonClick(wxCommandEvent &event) override;
//  void copyPosZOnButtonClick(wxCommandEvent &event) override;
//  void pastePosZOnButtonClick(wxCommandEvent &event) override;
//  void pastePosOnButtonClick(wxCommandEvent &event) override;
//  void copyPosOnButtonClick(wxCommandEvent &event) override;
//
//  void copyScaleXOnButtonClick(wxCommandEvent &event) override;
//  void pasteScaleXOnButtonClick(wxCommandEvent &event) override;
//  void copyScaleYOnButtonClick(wxCommandEvent &event) override;
//  void pasteScaleYOnButtonClick(wxCommandEvent &event) override;
//  void copyScaleZOnButtonClick(wxCommandEvent &event) override;
//  void pasteScaleZOnButtonClick(wxCommandEvent &event) override;
//  void copyScaleOnButtonClick(wxCommandEvent &event) override;
//  void pasteScaleOnButtonClick(wxCommandEvent &event) override;
//
//private:
//  void UpdateControls();
//};
//
#endif // __TransformPanel__
